<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on</title><link>https://zenuo.github.io/tags/tech/</link><description>Recent content in tech on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zenuo.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>2023-05-28-一次由Excel解析导致的OOM及其排查</title><link>https://zenuo.github.io/posts/2023/05/28/2023-05-28-%E4%B8%80%E6%AC%A1%E7%94%B1excel%E8%A7%A3%E6%9E%90%E5%AF%BC%E8%87%B4%E7%9A%84oom%E5%8F%8A%E5%85%B6%E6%8E%92%E6%9F%A5/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://zenuo.github.io/posts/2023/05/28/2023-05-28-%E4%B8%80%E6%AC%A1%E7%94%B1excel%E8%A7%A3%E6%9E%90%E5%AF%BC%E8%87%B4%E7%9A%84oom%E5%8F%8A%E5%85%B6%E6%8E%92%E6%9F%A5/</guid><description>在业务系统功能中，不难见到上传Excel文件批量处理的场景，由于Excel文件的复杂性，存在很多容易出问题的可能性。
1 复现 我们通过一个简化的SpringBoot工程来演示有问题的代码、如何通过Eclipse Memory Analyzer工具分析堆转储文件，来定位到问题代码。
工程代码：
. ├── pom.xml ├── readme.md ├── src │ └── main │ └── java │ └── demo │ └── exceloom │ └── DemoExcelOomApplication.java ├── test.xlsx 在DemoExcelOomApplication.java中是我们关注的重点，使用Apache POI框架解析输入流，然后读取第一张表的每一行：
@RequestMapping(value = &amp;#34;import&amp;#34;, method = RequestMethod.POST) public ResponseEntity&amp;lt;String&amp;gt; importData(MultipartFile file) throws Exception { Workbook workbook = WorkbookFactory.create(file.getInputStream()); // poi解析输入流 Sheet sheetOne = workbook.</description></item></channel></rss>